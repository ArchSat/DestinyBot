"""initial

Revision ID: 044b06b673fd
Revises: 
Create Date: 2023-08-18 19:40:24.544361

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '044b06b673fd'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clans',
    sa.Column('clan_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('clan_tag', sa.TEXT(), nullable=True),
    sa.Column('total_members', sa.INTEGER(), server_default='0', nullable=True),
    sa.Column('discord_members', sa.INTEGER(), server_default='0', nullable=True),
    sa.Column('inactive_10d', sa.INTEGER(), server_default='0', nullable=True),
    sa.Column('inactive_14d', sa.INTEGER(), server_default='0', nullable=True),
    sa.Column('inactive_21d', sa.INTEGER(), server_default='0', nullable=True),
    sa.Column('inactive_31d', sa.INTEGER(), server_default='0', nullable=True),
    sa.Column('leader_bungie_id', sa.INTEGER(), nullable=True),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default='now()', nullable=True),
    sa.Column('admins', sa.TEXT(), nullable=True),
    sa.Column('visible', sa.BOOLEAN(), server_default='True', nullable=False),
    sa.PrimaryKeyConstraint('clan_id'),
    sa.UniqueConstraint('clan_tag')
    )
    op.create_table('cogs_configs',
    sa.Column('cog_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('cog_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('cog_name')
    )
    op.create_table('meetings_channels',
    sa.Column('channel_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('planned_channel_id', sa.BIGINT(), nullable=True),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('custom_meeting_text', sa.TEXT(), nullable=True),
    sa.Column('icon_url', sa.TEXT(), nullable=True),
    sa.Column('default_members_count', sa.INTEGER(), nullable=False),
    sa.Column('max_members_count', sa.INTEGER(), nullable=False),
    sa.Column('activity_type', postgresql.ENUM('RAID_REPORT', 'DUNGEON_REPORT', 'CRUSIBLE_REPORT', 'TRIALS_REPORT', 'NIGHTFALL_REPORT', 'TRIUMPH_REPORT', 'DESTINY_TRACKER', name='resoursetype'), nullable=True),
    sa.Column('metric_hash', postgresql.ARRAY(sa.BIGINT()), nullable=True),
    sa.Column('voices_category_id', sa.BIGINT(), nullable=True),
    sa.Column('create_meeting_message_id', sa.BIGINT(), nullable=True),
    sa.PrimaryKeyConstraint('channel_id')
    )
    op.create_table('roles',
    sa.Column('group_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.BIGINT(), nullable=False),
    sa.Column('enabled', sa.BOOLEAN(), server_default='True', nullable=False),
    sa.Column('sort_key', sa.INTEGER(), server_default='0', nullable=False),
    sa.PrimaryKeyConstraint('group_id')
    )
    op.create_index(op.f('ix_roles_role_id'), 'roles', ['role_id'], unique=False)
    op.create_table('roles_trees',
    sa.Column('role_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.BIGINT(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['roles_trees.role_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('role_id')
    )
    op.create_table('sanctions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('type', postgresql.ENUM('WARN', 'BAN', 'TEXT_MUTE', 'VOICE_MUTE', name='sanctiontype'), nullable=False),
    sa.Column('author_id', sa.BIGINT(), nullable=False),
    sa.Column('member_id', sa.BIGINT(), nullable=False),
    sa.Column('reason', sa.TEXT(), nullable=False),
    sa.Column('expire', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('channel_id', sa.BIGINT(), nullable=True),
    sa.Column('message_id', sa.BIGINT(), nullable=True),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'EXPIRE', 'REMOVED', name='sanctionstatus'), server_default='ACTIVE', nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sanctions_expire'), 'sanctions', ['expire'], unique=False)
    op.create_index(op.f('ix_sanctions_member_id'), 'sanctions', ['member_id'], unique=False)
    op.create_index(op.f('ix_sanctions_status'), 'sanctions', ['status'], unique=False)
    op.create_index(op.f('ix_sanctions_type'), 'sanctions', ['type'], unique=False)
    op.create_table('ticket_types',
    sa.Column('type_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('display_name', sa.TEXT(), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=False),
    sa.Column('channel_prefix', sa.TEXT(), nullable=False),
    sa.Column('roles_can_see', postgresql.ARRAY(sa.BIGINT()), nullable=True),
    sa.Column('roles_can_close', postgresql.ARRAY(sa.BIGINT()), nullable=True),
    sa.Column('delete_after_close', sa.BIGINT(), nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), server_default='True', nullable=True),
    sa.PrimaryKeyConstraint('type_id')
    )
    op.create_table('tokens',
    sa.Column('bungie_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), nullable=False),
    sa.Column('token', sa.TEXT(), nullable=False),
    sa.Column('token_expire', postgresql.TIMESTAMP(), nullable=False),
    sa.Column('token_type', postgresql.ENUM('EXTENDED', 'BASE', name='tokentype'), server_default='BASE', nullable=False),
    sa.PrimaryKeyConstraint('bungie_id')
    )
    op.create_table('users',
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('balance', sa.NUMERIC(precision=1000, scale=2), server_default='0', nullable=False),
    sa.Column('bungie_id', sa.BIGINT(), nullable=True),
    sa.Column('leave_server_date', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('discord_id')
    )
    op.create_index(op.f('ix_users_bungie_id'), 'users', ['bungie_id'], unique=True)
    op.create_table('voice_categories',
    sa.Column('category_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('create_voice_channel_id', sa.BIGINT(), nullable=False),
    sa.Column('default_channel_name', sa.TEXT(), nullable=False),
    sa.Column('user_limit', sa.INTEGER(), nullable=True),
    sa.Column('default_overwrites', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.PrimaryKeyConstraint('category_id'),
    sa.UniqueConstraint('create_voice_channel_id')
    )
    op.create_table('voting',
    sa.Column('message_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.BIGINT(), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=False),
    sa.PrimaryKeyConstraint('message_id')
    )
    op.create_table('balance_transactions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('discord_id', sa.BIGINT(), nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=1000, scale=2), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('pair_transaction', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('status', postgresql.ENUM('SUCCESS', 'REJECTED', 'ERROR', name='transactionstatus'), server_default='ERROR', nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['discord_id'], ['users.discord_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_balance_transactions_pair_transaction'), 'balance_transactions', ['pair_transaction'], unique=False)
    op.create_table('meetings',
    sa.Column('meeting_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.BIGINT(), nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'COMPLETED', 'CANCELED', 'DELETED_BY_OTHER_USER', 'DELETED_BY_COMPLETED', 'DELETED_BY_OVERDUE', name='meetingstatus'), server_default='ACTIVE', nullable=False),
    sa.Column('binded_voice', sa.BIGINT(), nullable=True),
    sa.Column('planned', sa.BOOLEAN(), nullable=False),
    sa.Column('author_id', sa.BIGINT(), nullable=False),
    sa.Column('fireteam_max', sa.INTEGER(), nullable=False),
    sa.Column('comment', sa.TEXT(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('start_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('complete_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('actual_until', postgresql.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['meetings_channels.channel_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('meeting_id')
    )
    op.create_index(op.f('ix_meetings_author_id'), 'meetings', ['author_id'], unique=False)
    op.create_table('roles_historical_stats_requirements',
    sa.Column('requirement_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.BIGINT(), nullable=False),
    sa.Column('custom_text', sa.TEXT(), nullable=True),
    sa.Column('historical_stat_group', postgresql.ENUM('ALL_PVE', 'ALL_PVP', 'MERGED', name='historicalstatsgroup'), nullable=False),
    sa.Column('historical_stat_name', sa.TEXT(), nullable=False),
    sa.Column('statement', postgresql.ENUM('LESS', 'LESS_OR_EQUAL', 'MORE', 'MORE_OR_EQUAL', 'EQUAL', 'NOT_EQUAL', name='requirementstatement'), nullable=False),
    sa.Column('value', sa.BIGINT(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['roles.group_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('requirement_id')
    )
    op.create_table('roles_metric_score_requirements',
    sa.Column('requirement_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.BIGINT(), nullable=False),
    sa.Column('custom_text', sa.TEXT(), nullable=True),
    sa.Column('metric_hash', sa.BIGINT(), nullable=False),
    sa.Column('statement', postgresql.ENUM('LESS', 'LESS_OR_EQUAL', 'MORE', 'MORE_OR_EQUAL', 'EQUAL', 'NOT_EQUAL', name='requirementstatement'), nullable=False),
    sa.Column('value', sa.BIGINT(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['roles.group_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('requirement_id')
    )
    op.create_table('roles_objectives_requirements',
    sa.Column('requirement_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.BIGINT(), nullable=False),
    sa.Column('custom_text', sa.TEXT(), nullable=True),
    sa.Column('objective_hash', sa.BIGINT(), nullable=False),
    sa.Column('completed', sa.BOOLEAN(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['roles.group_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('requirement_id')
    )
    op.create_table('roles_objectives_values_requirements',
    sa.Column('requirement_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.BIGINT(), nullable=False),
    sa.Column('custom_text', sa.TEXT(), nullable=True),
    sa.Column('objective_hash', sa.BIGINT(), nullable=False),
    sa.Column('statement', postgresql.ENUM('LESS', 'LESS_OR_EQUAL', 'MORE', 'MORE_OR_EQUAL', 'EQUAL', 'NOT_EQUAL', name='requirementstatement'), nullable=False),
    sa.Column('value', sa.BIGINT(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['roles.group_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('requirement_id')
    )
    op.create_table('roles_role_requirements',
    sa.Column('requirement_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.BIGINT(), nullable=False),
    sa.Column('custom_text', sa.TEXT(), nullable=True),
    sa.Column('role_id', sa.BIGINT(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['roles.group_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('requirement_id')
    )
    op.create_table('roles_triump_completed_requirements',
    sa.Column('requirement_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.BIGINT(), nullable=False),
    sa.Column('custom_text', sa.TEXT(), nullable=True),
    sa.Column('record_hash', sa.BIGINT(), nullable=False),
    sa.Column('completed', sa.BOOLEAN(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['roles.group_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('requirement_id')
    )
    op.create_table('roles_triump_score_requirements',
    sa.Column('requirement_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.BIGINT(), nullable=False),
    sa.Column('custom_text', sa.TEXT(), nullable=True),
    sa.Column('statement', postgresql.ENUM('LESS', 'LESS_OR_EQUAL', 'MORE', 'MORE_OR_EQUAL', 'EQUAL', 'NOT_EQUAL', name='requirementstatement'), nullable=False),
    sa.Column('value', sa.BIGINT(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['roles.group_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('requirement_id')
    )
    op.create_table('subscriptions',
    sa.Column('discord_id', sa.BIGINT(), nullable=False),
    sa.Column('auto_renewal', sa.BOOLEAN(), server_default='True', nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), nullable=False),
    sa.Column('role_removed', sa.BOOLEAN(), server_default='False', nullable=False),
    sa.Column('transactions', sa.ARRAY(postgresql.UUID(as_uuid=True)), nullable=False),
    sa.ForeignKeyConstraint(['discord_id'], ['users.discord_id'], onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('discord_id')
    )
    op.create_index(op.f('ix_subscriptions_auto_renewal'), 'subscriptions', ['auto_renewal'], unique=False)
    op.create_index(op.f('ix_subscriptions_end_date'), 'subscriptions', ['end_date'], unique=False)
    op.create_index(op.f('ix_subscriptions_role_removed'), 'subscriptions', ['role_removed'], unique=False)
    op.create_table('tickets',
    sa.Column('channel_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('first_message_id', sa.BIGINT(), nullable=True),
    sa.Column('channel_name', sa.TEXT(), nullable=False),
    sa.Column('ticket_type_id', sa.INTEGER(), nullable=False),
    sa.Column('status', postgresql.ENUM('OPEN', 'CLOSED', 'DELETED', name='ticketstatus'), server_default='OPEN', nullable=False),
    sa.Column('author_id', sa.BIGINT(), nullable=False),
    sa.Column('comment', sa.TEXT(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('closed_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['ticket_type_id'], ['ticket_types.type_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('channel_id')
    )
    op.create_table('voices',
    sa.Column('channel_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.BIGINT(), nullable=False),
    sa.Column('channel_type', postgresql.ENUM('CREATOR', 'PERMANENT', 'TEMPORARY', 'DELETED', name='voicechanneltype'), server_default='TEMPORARY', nullable=False),
    sa.Column('author_id', sa.BIGINT(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['voice_categories.category_id'], ),
    sa.PrimaryKeyConstraint('channel_id')
    )
    op.create_index(op.f('ix_voices_channel_type'), 'voices', ['channel_type'], unique=False)
    op.create_table('votes_members',
    sa.Column('voting_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('vote_value', sa.BOOLEAN(), nullable=False),
    sa.ForeignKeyConstraint(['voting_id'], ['voting.message_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('voting_id', 'member_id')
    )
    op.create_table('meetings_members',
    sa.Column('meeting_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('LEADER', 'MEMBER', 'LEFT', 'KICKED', 'BANNED', name='memberstatus'), server_default='MEMBER', nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('bungie_name', sa.TEXT(), nullable=True),
    sa.Column('other_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['meeting_id'], ['meetings.meeting_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('meeting_id', 'discord_id')
    )
    op.create_index(op.f('ix_meetings_members_status'), 'meetings_members', ['status'], unique=False)
    op.create_table('tickets_messages',
    sa.Column('ticket_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.BIGINT(), nullable=False),
    sa.Column('message_content', sa.TEXT(), nullable=True),
    sa.Column('embed_json', postgresql.ARRAY(postgresql.JSONB(astext_type=sa.Text())), nullable=True),
    sa.Column('attachments', postgresql.ARRAY(sa.TEXT()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.channel_id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('ticket_id', 'message_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tickets_messages')
    op.drop_index(op.f('ix_meetings_members_status'), table_name='meetings_members')
    op.drop_table('meetings_members')
    op.drop_table('votes_members')
    op.drop_index(op.f('ix_voices_channel_type'), table_name='voices')
    op.drop_table('voices')
    op.drop_table('tickets')
    op.drop_index(op.f('ix_subscriptions_role_removed'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_end_date'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_auto_renewal'), table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_table('roles_triump_score_requirements')
    op.drop_table('roles_triump_completed_requirements')
    op.drop_table('roles_role_requirements')
    op.drop_table('roles_objectives_values_requirements')
    op.drop_table('roles_objectives_requirements')
    op.drop_table('roles_metric_score_requirements')
    op.drop_table('roles_historical_stats_requirements')
    op.drop_index(op.f('ix_meetings_author_id'), table_name='meetings')
    op.drop_table('meetings')
    op.drop_index(op.f('ix_balance_transactions_pair_transaction'), table_name='balance_transactions')
    op.drop_table('balance_transactions')
    op.drop_table('voting')
    op.drop_table('voice_categories')
    op.drop_index(op.f('ix_users_bungie_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('tokens')
    op.drop_table('ticket_types')
    op.drop_index(op.f('ix_sanctions_type'), table_name='sanctions')
    op.drop_index(op.f('ix_sanctions_status'), table_name='sanctions')
    op.drop_index(op.f('ix_sanctions_member_id'), table_name='sanctions')
    op.drop_index(op.f('ix_sanctions_expire'), table_name='sanctions')
    op.drop_table('sanctions')
    op.drop_table('roles_trees')
    op.drop_index(op.f('ix_roles_role_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_table('meetings_channels')
    op.drop_table('cogs_configs')
    op.drop_table('clans')
    # ### end Alembic commands ###
